package com.whu.charityangel.chain;

import com.alipay.mychain.sdk.api.MychainClient;
import com.alipay.mychain.sdk.api.env.ClientEnv;
import com.alipay.mychain.sdk.api.env.ISslOption;
import com.alipay.mychain.sdk.api.env.SignerOption;
import com.alipay.mychain.sdk.api.env.SslBytesOption;
import com.alipay.mychain.sdk.api.logging.AbstractLoggerFactory;
import com.alipay.mychain.sdk.api.logging.ILogger;
import com.alipay.mychain.sdk.api.utils.Utils;
import com.alipay.mychain.sdk.common.VMTypeEnum;
import com.alipay.mychain.sdk.crypto.MyCrypto;
import com.alipay.mychain.sdk.crypto.PublicKey;
import com.alipay.mychain.sdk.crypto.keyoperator.Pkcs8KeyOperator;
import com.alipay.mychain.sdk.crypto.keypair.Keypair;
import com.alipay.mychain.sdk.crypto.signer.SignerBase;
import com.alipay.mychain.sdk.domain.account.Account;
import com.alipay.mychain.sdk.domain.account.AccountStatus;
import com.alipay.mychain.sdk.domain.account.AuthMap;
import com.alipay.mychain.sdk.domain.account.Identity;
import com.alipay.mychain.sdk.errorcode.ErrorCode;
import com.alipay.mychain.sdk.message.transaction.AbstractTransactionRequest;
import com.alipay.mychain.sdk.message.transaction.TransactionReceiptResponse;
import com.alipay.mychain.sdk.message.transaction.account.CreateAccountRequest;
import com.alipay.mychain.sdk.message.transaction.account.CreateAccountResponse;
import com.alipay.mychain.sdk.message.transaction.contract.*;
import com.alipay.mychain.sdk.type.BaseFixedSizeUnsignedInteger;
import com.alipay.mychain.sdk.utils.ByteUtils;
import com.alipay.mychain.sdk.utils.IOUtil;
import com.alipay.mychain.sdk.utils.RandomUtil;
import com.alipay.mychain.sdk.vm.EVMOutput;
import com.alipay.mychain.sdk.vm.EVMParameter;

import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;


public class Chaintest {
    public   String contractCodeString = "";//字节码
    private   byte[] contractCode = ByteUtils.hexStringToBytes(contractCodeString); //CreditManager
    //升级合约
    //private   String contractUpdateCodeString = "";//运行时升级
    //private   byte[] contractUpdateCode = ByteUtils.hexStringToBytes(contractUpdateCodeString); //CreditManager
    /**
     * contract id
     */
    public String callContractId = "wuda1626426288661"; //jr1623289023248，traceGoods1623238195611，traceGoods1623134872499合约名字,测试使用
    //private   String creditManagerContractId = "wudaaccount_1626424952480";//账户名字,测试使用"hash":"eefb1e9c4701bec22c56afe41fd0204f33a5d12f9808a7f7869d67d17a75a7cc"


    public   String account = "Fpga123";
    //private   final String account = "Fpga123";//管理员
    private   Identity userIdentity;
    private   Keypair userKeypair;

    /**
     * sdk client
     */
    private   MychainClient sdk;

    /**
     * client key password
     */
    public   String keyPassword = "Fpga_123";//管理员
    /**
     * user password
     */
    public   String userPassword = "Fpga_123";//管理员
    /**
     * host ip
     */

    private   String host = "47.103.163.48";

    /**
     * server port
     */
    private   int port = 18130;
    /**
     * trustCa password.
     */
    private   String trustStorePassword = "mychain";
    /**
     * mychain environment
     */
    private   ClientEnv env;
    /**
     * mychain is tee Chain
     */
    private   boolean isTeeChain = false;//不加密,计划删掉后面多余的部分
    /**
     * tee chain publicKeys
     */
    private   List<byte[]> publicKeys = new ArrayList<byte[]>();
    /**
     * tee chain secretKey
     */
    private   String secretKey = "123456";


    public   void initMychainEnv() throws IOException {//连接准备
        // any user key for sign message
        String userPrivateKeyFile = "user.key";
        userIdentity = Utils.getIdentityByName(account);
        Pkcs8KeyOperator pkcs8KeyOperator = new Pkcs8KeyOperator();
        userKeypair = pkcs8KeyOperator.load(IOUtil.inputStreamToByte(Chaintest.class.getClassLoader().getResourceAsStream(userPrivateKeyFile)), userPassword);

        // use publicKeys by tee
        if (isTeeChain) {
            Keypair keypair = new Pkcs8KeyOperator()
                    .loadPubkey(
                            IOUtil.inputStreamToByte(Chaintest.class.getClassLoader().getResourceAsStream("test_seal_pubkey.pem")));
            byte[] publicKeyDer = keypair.getPubkeyEncoded();
            publicKeys.add(publicKeyDer);
        }

        env = buildMychainEnv();
        ILogger logger = AbstractLoggerFactory.getInstance(Chaintest.class);
        env.setLogger(logger);
    }

    private   ClientEnv buildMychainEnv() throws IOException {//登入账户
        InetSocketAddress inetSocketAddress = InetSocketAddress.createUnresolved(host, port);
        String keyFilePath = "client.key";
        String certFilePath = "client.crt";
        String trustStoreFilePath = "trustCa";
        // build ssl option
        ISslOption sslOption = new SslBytesOption.Builder()
                .keyBytes(IOUtil.inputStreamToByte(Chaintest.class.getClassLoader().getResourceAsStream(keyFilePath)))
                .certBytes(IOUtil.inputStreamToByte(Chaintest.class.getClassLoader().getResourceAsStream(certFilePath)))
                .keyPassword(keyPassword)
                .trustStorePassword(trustStorePassword)
                .trustStoreBytes(
                        IOUtil.inputStreamToByte(Chaintest.class.getClassLoader().getResourceAsStream(trustStoreFilePath)))
                .build();

        List<InetSocketAddress> socketAddressArrayList = new ArrayList<InetSocketAddress>();
        socketAddressArrayList.add(inetSocketAddress);

        List<SignerBase> signerBaseList = new ArrayList<SignerBase>();
        SignerBase signerBase = MyCrypto.getInstance().createSigner(userKeypair);
        signerBaseList.add(signerBase);
        SignerOption signerOption = new SignerOption();
        signerOption.setSigners(signerBaseList);
        return ClientEnv.build(socketAddressArrayList, sslOption, signerOption);
    }

    public   void initSdk() {//接口准备
        sdk = new MychainClient();
        boolean initResult = sdk.init(env);
        if (!initResult) {
            exit("initSdk", "sdk init failed.");
        }else{
            System.out.println("sdk init success");
        }
    }

    private   String getErrorMsg(int errorCode) {//报错
        int minMychainSdkErrorCode = ErrorCode.SDK_INTERNAL_ERROR.getErrorCode();
        if (errorCode < minMychainSdkErrorCode) {
            return ErrorCode.valueOf(errorCode).getErrorDesc();
        } else {
            return ErrorCode.valueOf(errorCode).getErrorDesc();
        }
    }

    private   void exit(String tag, String msg) {
        exit(String.format("%s error : %s ", tag, msg));
    }

    private   void exit(String msg) {
        System.out.println(msg);
        System.exit(0);
    }

    private void signRequest(AbstractTransactionRequest request) {//签名设置
        // sign request
        long ts = sdk.getNetwork().getSystemTimestamp();
        request.setTxTimeNonce(ts, BaseFixedSizeUnsignedInteger.Fixed64BitUnsignedInteger
                .valueOf(RandomUtil.randomize(ts + request.getTransaction().hashCode())), true);
        request.complete();
        sdk.getConfidentialService().signRequest(env.getSignerOption().getSigners(), request);
    }

    //部署合约,尝试=======================================================================
    public  String deployContract(Long _pragmaId, String _pragmaName, String _deadLine, String _transTime, Integer _amount){
        EVMParameter contractParameters = new EVMParameter();//调用部署,这里可能有问题
        String contractId = _pragmaName + System.currentTimeMillis();
        contractParameters.addUint(BigInteger.valueOf(_pragmaId));
        contractParameters.addString(_pragmaName);
        contractParameters.addString(_deadLine);
        contractParameters.addString(_transTime);
        contractParameters.addUint(BigInteger.valueOf(_amount));

        //parameters.addString(_name);
        //parameters.addUint(BigInteger.valueOf(_status));

        DeployContractRequest request = new DeployContractRequest(userIdentity,
                Utils.getIdentityByName(contractId),contractCode,VMTypeEnum.EVM,
                contractParameters,BigInteger.ZERO);

        TransactionReceiptResponse deployContractResult;//合约创建的收据
        //request.setTxGas(5000);

        deployContractResult = sdk.getContractService().deployContract(request);


        // deploy contract
        if (!deployContractResult.isSuccess()
                || deployContractResult.getTransactionReceipt().getResult() != 0) {
            exit("deployContract",
                    getErrorMsg((int) deployContractResult.getTransactionReceipt().getResult()));
        } else {//成功
            System.out.println("deploy contract success.contact id is " + contractId);
        }
        return contractId;
    }

    public   Boolean addTransactions(Long _id, String _from, String _to, Integer _amount){
        EVMParameter parameters = new EVMParameter("_addTransactions(uint256,string,string,uint256)");
        parameters.addUint(BigInteger.valueOf(_id));
        parameters.addString(_from);
        parameters.addString(_to);
        parameters.addUint(BigInteger.valueOf(_amount));

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_addTransactions Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
            return false;
        } else {
            System.out.println("call _addTransactions success");
            return true ;
        }
    }

    public   String selectInfoById(Integer _id){//==============================
        String infoById = null;//======================
        EVMParameter parameters = new EVMParameter("_selectInfoById(uint256)");
        parameters.addUint(BigInteger.valueOf(_id));

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_selectInfoById Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _selectInfoByid function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                infoById = contractReturnValues.getString(); /*未知类型*/;
                //attributeInfo = new AttributeInfo();//=================================================
                //attributeInfo.setId(contractReturnValues.getIdentity().toString());
                //attributeInfo.setName(contractReturnValues.getString());
                System.out.println("call _selectInfoById success");
                //System.out.println("this:"+infoById);

            }
        }

        return infoById ;
    }

    public long selectAllAmountByFrom(String _from){
        long sum = 0L;
        EVMParameter parameters = new EVMParameter("_selectAllAmountByFrom(string)");
        parameters.addString(_from);

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_selectAllAmountByFrom Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _selectAllAmountByFrom function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                sum = contractReturnValues.getUint().longValue();
                System.out.println("call _selectAllAmountByFrom success,count is: " + sum);
            }
        }
        return sum ;
    }

    public long selectAllAmountByTo(String _to){
        long sum = 0L;
        EVMParameter parameters = new EVMParameter("_selectAllAmountByTo(string)");
        parameters.addString(_to);

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_selectAllAmountByTo Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _selectAllAmountByTo function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                sum = contractReturnValues.getUint().longValue();
                System.out.println("call _selectAllAmountByTo success,count is: " + sum);
            }
        }
        return sum ;
    }

    public String showInfoByFrom(String _from) {
        String infoByFrom = null;//======================
        EVMParameter parameters = new EVMParameter("_showInfoByFrom(string)");
        parameters.addString(_from);

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_showInfoByFrom Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _showInfoByFrom function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                //infoByFrom = output.toString();
                infoByFrom = contractReturnValues.getString(); /*未知类型*/;
                //attributeInfo = new AttributeInfo();//=================================================
                //attributeInfo.setId(contractReturnValues.getIdentity().toString());
                //attributeInfo.setName(contractReturnValues.getString());
                System.out.println("call _showInfoByFrom success");

            }
        }

        return infoByFrom ;
    }

    public String showInfoByTo(String _to) {
        String infoByTo = null;//======================
        EVMParameter parameters = new EVMParameter("_showInfoByTo(string)");
        parameters.addString(_to);

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_showInfoByTo Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _showInfoByTo function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                infoByTo = contractReturnValues.getString(); /*未知类型*/;
                //attributeInfo = new AttributeInfo();//=================================================
                //attributeInfo.setId(contractReturnValues.getIdentity().toString());
                //attributeInfo.setName(contractReturnValues.getString());
                System.out.println("call _showInfoByTo success");

            }
        }

        return infoByTo ;
    }

    public String createAccount(){//账户部分
        long startIndex = System.currentTimeMillis();
        String newAccountname = "wudaaccount_" + startIndex;//随机名字
        Pkcs8KeyOperator pkcs8KeyOperator = new Pkcs8KeyOperator();
        InputStream userPrivateKeyFilePath = Account.class.getClassLoader().getResourceAsStream(
                "user.key");
        Keypair userKeypair= null;
        try {
            userKeypair = pkcs8KeyOperator.load(IOUtil.inputStreamToByte(userPrivateKeyFilePath), userPassword);
        } catch (IOException e) {
            e.printStackTrace();
        }
        // build account
        Account newAccount = new Account();//账户对象
        newAccount.setIdentity(Utils.getIdentityByName(newAccountname));//添加随机名字作为的标识
        newAccount.setBalance(0);//余额??这玩意哪来的
        newAccount.setStatus(AccountStatus.NORMAL);//一个未知的值
        AuthMap authMap = new AuthMap();
        newAccount.setAuthMap(authMap.updateAuth(new PublicKey(userKeypair), 105));//账户公钥
        newAccount.setRecoverKey(new PublicKey(userKeypair));//恢复
        CreateAccountRequest request = new CreateAccountRequest(userIdentity, newAccount);//用这玩意设置一个账户
        // create testAccount
        CreateAccountResponse createAccountResult = sdk.getAccountService().createAccount(request);
        if (!createAccountResult.isSuccess()) {
            exit("wudaaccount", getErrorMsg((int)createAccountResult.getTransactionReceipt().getResult()));
        } else {//设置账户成功
            System.out.println(String.format("create %s success.AntChain response data:%s",newAccountname,createAccountResult.toString()));
        }
        return newAccountname;
    }

    public String getAttribute() {
        String attribute = null;//======================
        EVMParameter parameters = new EVMParameter("_getAttribute()");

        CallContractRequest request = new CallContractRequest(userIdentity,
                Utils.getIdentityByName(callContractId), parameters, BigInteger.ZERO, VMTypeEnum.EVM);

        TransactionReceiptResponse callContractResult;
        callContractResult = sdk.getContractService().callContract(request);

        if (!callContractResult.isSuccess() || callContractResult.getTransactionReceipt().getResult() != 0) {
            System.out.println("_getAttribute Error :"  + getErrorMsg((int) callContractResult.getTransactionReceipt().getResult()));
        } else {
            byte[] output = callContractResult.getTransactionReceipt().getOutput();
            if (output == null) {
                exit("call _getAttribute function", "output failed");
            } else {
                // decode return values
                EVMOutput contractReturnValues = new EVMOutput(ByteUtils.toHexString(output));
                attribute= contractReturnValues.getString(); /*未知类型*/;
                //attributeInfo = new AttributeInfo();//=================================================
                //attributeInfo.setId(contractReturnValues.getIdentity().toString());
                //attributeInfo.setName(contractReturnValues.getString());
                System.out.println("call _getAttribute success");
                //System.out.println("this:"+infoById);

            }
        }

        return attribute ;
    }


}
    
/*    
//###############################################################################
    public void main(String[] args) throws Exception {
        //step 1:init mychain env.
        initMychainEnv();
        //step 2: init sdk client
        initSdk();
        //createAccount();
        //step 3 : deploy a contract using useridentity.
        //deployContract(6666,"65897","65898","65899",6666);//部署合约
        //addTransactions(1, "2", "3", 4);
        sleectInfoById(1);
        //step 4 callContract.
        //String testAccount = "jraccount_1622277417038";
        //String testAccount = "wudaaccount_1626316747504";
        //callContractIssueCredit(testAccount,800);
        //callContractQueryCredit(testAccount);
        //callContractTransferCredit(testAccount,100);

        //upgrade contract 调用
        //updateContractDemo();
        //callContractGetParamsTest();


        //freezeContract调用
        //freezeContractTest();
        //callContractQueryCredit(account);

        //unFreeze调用
        //unFreezeContractTest();

        System.in.read();
        //step 5 : sdk shut down
        sdk.shutDown();
    }

*/
